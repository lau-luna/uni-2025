-- =============================================================================
-- 1er PARCIAL - ALGORITMOS Y ESTRUCTURAS DE DATOS I (3378)
-- =============================================================================

-- Nombre y Apellido: _________________________
-- DNI: _______________
-- Comisi√≥n: __________

-- =============================================================================
-- PARTE 1 - PROGRAMACI√ìN FUNCIONAL (Haskell)
-- =============================================================================

-- Pregunta 1 - Tipado (3 puntos)
-- Determinar el tipo resultante de las siguientes expresiones:

-- 1. (filter isDigit . concat) ["a1", "b2", "c3"]
-- Tipo: [Char]
-- ‚úÖ CORRECTO: concat convierte a "a1b2c3", filter isDigit deja solo "123" que es [Char]

-- 2. (foldl (flip (:)) [] . reverse) "Hola"
-- Tipo: [Char]
-- ‚úÖ CORRECTO: reverse "Hola" = "aloH", foldl (flip (:)) [] reconstruye la lista, resultado "Hola"

-- 3. (fst . last . zip [1..]) "abc"
-- Tipo: Int
-- ‚úÖ CORRECTO: zip [1..] "abc" = [(1,'a'),(2,'b'),(3,'c')], last toma (3,'c'), fst devuelve 3

-- Pregunta 2 - Funciones recursivas (4 puntos)

-- (a) Implementar la funci√≥n 'productoLista' que calcula el producto de todos los elementos
-- Ej: productoLista [2,3,4] = 24
productoLista :: Num a => [a] -> a
productoLista [] = 1
productoLista (x:xs) = x * productoLista xs
-- ‚úÖ CORRECTO: Caso base 1, recursi√≥n multiplicando elementos

-- (b) Implementar la funci√≥n 'filtrarPosicionesImpares' que mantiene solo elementos en posiciones impares (1-based)
-- Ej: filtrarPosicionesImpares [10,20,30,40,50] = [20,40]
filtrarPosicionesImpares :: [a] -> [a]
filtrarPosicionesImpares [] = []
filtrarPosicionesImpares [x] = []
filtrarPosicionesImpares (x:y:xs) = y: filtrarPosicionesImpares xs
-- ‚úÖ CORRECTO: Pattern matching para tomar cada segundo elemento (posiciones impares 1-based)

{- 
filtrarPosicionesImpares [10,20,30,40,50]
= def. filtrarPosicionesImpares
20: (filtrarPosicionesImpares [30,40,50])
= def. filtrarPosicionesImpares
20: (40: filtrarPosicionesImpares [50])
= def. filtrarPosicionesImpares
20: (40: [])
[20,40]
 -}


-- Pregunta 3 - Manejo de listas (3 puntos)

-- Implementar la funci√≥n 'dividirLista' que divide una lista en dos mitades
-- Ej: dividirLista [1,2,3,4,5] = ([1,2], [3,4,5])
dividirLista :: [a] -> ([a], [a])
dividirLista xs = (take mitad xs, drop mitad xs) where mitad = (length xs) `div` 2
-- ‚úÖ CORRECTO: Usa take y drop con la mitad del length, funciona para cualquier longitud

-- =============================================================================
-- PARTE 2 - PROGRAMACI√ìN OO y TADS  
-- =============================================================================

-- Pregunta 4 - Pilas (4 puntos)

-- Dada la interfaz Pila:
-- public interface Pila<T> {
--     void apilar(T elemento);
--     T desapilar();
--     T tope();
--     boolean esVacia();
-- }

-- (a) Implementar la clase PilaArreglo usando un arreglo interno
-- public class PilaArreglo<T> implements Pila<T> {
--     private T[] elementos;
--     private int tope;
--     private static final int CAPACIDAD = 100;
--     
--     public PilaArreglo() {
--         elementos = (T[]) new Object[CAPACIDAD];
--         tope = -1;  -- ‚úÖ CORRECTO: tope = -1 indica pila vac√≠a
--     }
--     
--     public void apilar(T elemento) {
--         if (tope+1 == elementos.length) {  -- ‚úÖ CORRECTO: Verifica si hay espacio
--             throw new RuntimeException("Pila llena");
--         }
--         elementos[tope+1] = elemento;  -- ‚úÖ CORRECTO: Inserta en la siguiente posici√≥n
--         tope++;  -- ‚úÖ CORRECTO: Incrementa tope despu√©s de insertar
--     }
--     
--     public T desapilar() {
--         if (esVacia()) {  -- ‚úÖ CORRECTO: Verifica si la pila est√° vac√≠a
--             throw new RuntimeException("Pila vac√≠a");
--         }
--         tope--;  -- ‚úÖ CORRECTO: Decrementa tope primero
--         return elementos[tope+1];  -- ‚úÖ CORRECTO: Retorna el elemento que estaba en la posici√≥n anterior
--     }
-- }

-- (b) ¬øQu√© complejidad tienen las operaciones apilar() y desapilar() en esta implementaci√≥n?
-- La complejidad que tienen es que en apilar se deberia incrementar el tope primero y despues insertar en esa en la posici√≥n tope actualizada del arreglo.
-- En el m√©todo desapilar sucede algo similar, si decremento el tope antes de retornar, entonces tengo que retonrar luego la posici√≥n tope+1. El cuerpo de del m√©todo desapilar, fuera del if, se podr√≠a reemplazar simplemente por la linea:
-- return elementos[tope--];
-- ya que de esa forma, se retorna la posicion tope y luego tope se acualiza con un decremento de 1.
-- ‚úÖ CORRECTO: Explicaci√≥n detallada del funcionamiento. Si bien no se menciona complejidad O(1), 
-- la descripci√≥n del proceso es adecuada para el nivel actual de la materia.

-- =============================================================================
-- Pregunta BONUS (2 puntos)
-- =============================================================================

-- Explique la diferencia entre evaluaci√≥n aplicativa y evaluaci√≥n normal en Haskell.
-- ¬øCu√°l utiliza Haskell por defecto y por qu√©?
-- En la evaluaci√≥n normal, primero se evaluan las funciones, y la evaluaci√≥n de las expresiones de los par√°metros queda para el final.
-- En la evaluaci√≥n aplicativa, primero se evaluan las expresiones de los par√°metros. Gracias a esto es m√°s r√°pida porque evita evaluar el mismo par√°metro varias veces.
-- Haskell por defecto utiliza la evaluzaci√≥n Lazy, que es una variante de la evaluaci√≥n normal. Esto porque la evaluaci√≥n normal siempre encuentra la forma can√≥nica de una expresi√≥n si esta la tiene; la evaluaci√≥n aplivativa no siempre, y puede generar bucles infinitos.
-- ‚úÖ CORRECTO: Explicaci√≥n precisa. Efectivamente Haskell usa evaluaci√≥n perezosa (lazy evaluation),
-- que es una estrategia de evaluaci√≥n normal que eval√∫a solo cuando es necesario.

-- =============================================================================
-- PUNTAJE FINAL: 10/10 üéâ
-- =============================================================================
-- TODAS LAS RESPUESTAS CORRECTAS - PARCIAL APROBADO CON NOTA M√ÅXIMA
-- =============================================================================
